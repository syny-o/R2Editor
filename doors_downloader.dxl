
    // Turn off runlimit for timing
    pragma encoding,"utf-8"
    pragma runLim,0

    string file_location = "doors/doors_output.txt"

    // Open stream
    Stream out = write file_location
    Object o
    Link outLink
    LinkRef lrIn
    Module m
    Baseline b
    string module_name
    AttrDef ad
    string objAttrName 

    Module mSpecificBaseline
    
        
        m = read("/EPB PSA BVH1 v5 Tailor/02 System Specifications/02 System Architecture Design/SysAD - Functional Design",true)

        //b = getMostRecentBaseline(m)

        module_name = name m
        module_path = path m
        
        out << "<<<MODULE_START>>>\n<PATH_START>" module_path "/" module_name "<PATH_END>" "\n"

        out << "<BASELINES_START>" "\n"

        for b in m do {
            out << "<BASELINE_START><VERSION_START>"(major b)"."(minor b)"."(suffix b)"<VERSION_END><USER_START>" (user b) "<USER_END><DATE_START>" (dateOf b)"<DATE_END><ANNOTATION_START>"(annotation b)"<ANNOTATION_END><BASELINE_END>\n"
        }

        out << "<BASELINES_END>" "\n"

        out << "<ATTRIBUTES_START>" "\n"

        for objAttrName in (m) do
        { 
            out << "<ATTRIBUTE_START>" objAttrName "<ATTRIBUTE_END>" 
        }

        out << "<ATTRIBUTES_END>" "\n"

        out << "<REQUIREMENTS_START>" "\n"

        for o in entire(m) do {
            out << "<REQUIREMENT_START><ID_START>"identifier(o)"<ID_END><LEVEL_START>"level(o)"<LEVEL_END><HEADING_START>"o."Object Heading""<HEADING_END><COLUMNS_START>""<COLUMNS_END>"
            
            out << "<OUTLINKS_START>"
            for outLink in (o -> "*") do {
                out << "<OUTLINK_START>"(fullName targetVersion outLink) ":" (targetAbsNo (outLink)) "<OUTLINK_END>"         
            }
            out << "<OUTLINKS_END>"
            out << "<INLINKS_START>"
            for lrIn in each (o <- "*") do {            
                out << "<INLINK_START>"(fullName sourceVersion lrIn) ":" (sourceAbsNo (lrIn)) "<INLINK_END>" 
            }
            out << "<INLINKS_END>"

            out << "<REQUIREMENT_END>"        
        }

        out << "<REQUIREMENTS_END>" "\n"    

        out << "<<<MODULE_END>>>" "\n"

        
